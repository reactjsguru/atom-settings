"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var chrome_debugging_domain_1 = require("../chrome-debugging-domain");
var DebuggerDomain = (function (_super) {
    __extends(DebuggerDomain, _super);
    function DebuggerDomain() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // methods
    DebuggerDomain.prototype.enable = function () {
        return this.send('enable');
    };
    DebuggerDomain.prototype.disable = function () {
        return this.send('disable');
    };
    DebuggerDomain.prototype.setBreakpointsActive = function (params) {
        return this.send('setBreakpointsActive', params);
    };
    DebuggerDomain.prototype.setSkipAllPauses = function (params) {
        return this.send('setSkipAllPauses', params);
    };
    DebuggerDomain.prototype.setBreakpointByUrl = function (params) {
        return this.send('setBreakpointByUrl', params);
    };
    DebuggerDomain.prototype.setBreakpoint = function (params) {
        return this.send('setBreakpoint', params);
    };
    DebuggerDomain.prototype.removeBreakpoint = function (params) {
        return this.send('removeBreakpoint', params);
    };
    DebuggerDomain.prototype.continueToLocation = function (params) {
        return this.send('continueToLocation', params);
    };
    DebuggerDomain.prototype.stepOver = function () {
        return this.send('stepOver');
    };
    DebuggerDomain.prototype.stepInto = function () {
        return this.send('stepInto');
    };
    DebuggerDomain.prototype.stepOut = function () {
        return this.send('stepOut');
    };
    DebuggerDomain.prototype.pause = function () {
        return this.send('pause');
    };
    DebuggerDomain.prototype.resume = function () {
        return this.send('resume');
    };
    DebuggerDomain.prototype.setScriptSource = function (params) {
        return this.send('setScriptSource', params);
    };
    DebuggerDomain.prototype.restartFrame = function (params) {
        return this.send('restartFrame', params);
    };
    DebuggerDomain.prototype.getScriptSource = function (params) {
        return this.send('getScriptSource', params);
    };
    DebuggerDomain.prototype.setPauseOnExceptions = function (params) {
        return this.send('setPauseOnExceptions', params);
    };
    DebuggerDomain.prototype.evaluateOnCallFrame = function (params) {
        return this.send('evaluateOnCallFrame', params);
    };
    DebuggerDomain.prototype.setVariableValue = function (params) {
        return this.send('setVariableValue', params);
    };
    DebuggerDomain.prototype.setAsyncCallStackDepth = function (params) {
        return this.send('setAsyncCallStackDepth', params);
    };
    DebuggerDomain.prototype.setBlackboxPatterns = function (params) {
        return this.send('setBlackboxPatterns', params);
    };
    // events
    DebuggerDomain.prototype.scriptParsed = function (cb) {
        return this.addListener('scriptParsed', cb);
    };
    DebuggerDomain.prototype.scriptFailedToParse = function (cb) {
        return this.addListener('scriptFailedToParse', cb);
    };
    DebuggerDomain.prototype.breakpointResolved = function (cb) {
        return this.addListener('breakpointResolved', cb);
    };
    DebuggerDomain.prototype.paused = function (cb) {
        return this.addListener('paused', cb);
    };
    DebuggerDomain.prototype.resumed = function (cb) {
        return this.addListener('resumed', cb);
    };
    return DebuggerDomain;
}(chrome_debugging_domain_1.ChromeDebuggingDomain));
exports.DebuggerDomain = DebuggerDomain;
//# sourceMappingURL=debugger.js.map