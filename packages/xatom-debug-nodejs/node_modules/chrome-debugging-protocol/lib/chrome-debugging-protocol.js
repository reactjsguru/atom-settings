"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var chrome_debugging_requester_1 = require("./chrome-debugging-requester");
var WebSocket = require("ws");
var ChromeDebuggingProtocol = (function () {
    function ChromeDebuggingProtocol(socketUrl, options) {
        this.socketUrl = socketUrl;
        this.event = new events_1.EventEmitter();
        if (options) {
            this.log = Boolean(options.log);
        }
    }
    ChromeDebuggingProtocol.prototype.didClose = function (cb) {
        this.event.addListener('didClose', cb);
    };
    ChromeDebuggingProtocol.prototype.didReceiveError = function (cb) {
        this.event.addListener('didReceiveError', cb);
    };
    ChromeDebuggingProtocol.prototype.disconnect = function () {
        this.socket.close();
        this.event.emit('didClose');
    };
    ChromeDebuggingProtocol.prototype.connect = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.socket = new WebSocket(_this.socketUrl);
            _this.socket.on('error', reject);
            _this.socket.on('open', function () {
                _this.socket.removeListener('error', reject);
                _this.socket.on('error', function (error) {
                    _this.event.emit('didReceiveError', error);
                });
                _this.requester = new chrome_debugging_requester_1.ChromeDebuggingRequester(_this.socket);
                if (_this.log) {
                    _this.requester.enableLogging();
                }
                var domains = _this.requester.getDomains();
                resolve(domains);
            });
            _this.socket.on('close', function () { return _this.event.emit('didClose'); });
        });
    };
    return ChromeDebuggingProtocol;
}());
exports.ChromeDebuggingProtocol = ChromeDebuggingProtocol;
//# sourceMappingURL=chrome-debugging-protocol.js.map