/// <reference types="node" />
import { EventEmitter } from 'events';
import { Domains, ChromeDebuggingProtocol } from 'chrome-debugging-protocol';
export interface Script {
    scriptId?: string;
    url: string;
    sourceMapURL?: string;
    sourceMap?: any;
}
export declare class ChromeDebuggingProtocolDebugger {
    connected: boolean;
    paused: boolean;
    domains: Domains;
    protocol: ChromeDebuggingProtocol;
    breakpoints: Array<object>;
    scripts: Array<Script>;
    callFrames: Array<any>;
    events: EventEmitter;
    skipFirstPause: boolean;
    private ignoreUrls;
    disconnect(): void;
    didConnect(domains: Domains): Promise<any>;
    getFilePathFromUrl(fileUrl: string): string;
    fileExists(filePath: string): Promise<{}>;
    connect(socketUrl: string): Promise<any>;
    addParsedScript(script: Script): void;
    getUrlForMappedSource(fileUrl: string): any;
    private getObjectFromUrl(fileUrl);
    private getObjectFromString(data);
    private getObjectFromFile(filePath);
    resume(): any;
    pause(): any;
    stepOver(): any;
    stepInto(): any;
    stepOut(): any;
    getProperties(params: any): any;
    evaluateOnFrames(expression: string, frames: Array<any>): Promise<{}>;
    evaluate(expression: string): Promise<{}>;
    getScriptById(scriptId: number): Script;
    getScriptByUrl(url: string): Script;
    getCallStack(): {
        name: any;
        columnNumber: any;
        lineNumber: any;
        filePath: any;
        scope: {
            name: any;
            value: any;
        }[];
    }[];
    getFrameByIndex(index: number): any;
    setBreakpointFromScript(script: Script, lineNumber: number, condition?: string): Promise<{}>;
    addBreakpoint(url: string, lineNumber: number, condition?: string): any;
    getBreakpointById(id: any): Promise<any>;
    getBreakpoint(url: string, lineNumber: number): object;
    removeBreakpoint(url: string, lineNumber: number): any;
    getScopeFromFrame(frame: any): {
        name: any;
        value: any;
    }[];
    getScope(): {
        name: any;
        value: any;
    }[];
    didClose(cb: Function): void;
    didLogMessage(cb: Function): void;
    didThrownException(cb: Function): void;
    didLoadScript(cb: Function): void;
    didPause(cb: Function): void;
    didResume(cb: Function): void;
}
