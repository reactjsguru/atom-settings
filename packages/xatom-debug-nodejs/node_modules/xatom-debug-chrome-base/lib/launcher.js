"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var child_process_1 = require("child_process");
var http_1 = require("http");
var os_1 = require("os");
var lodash_1 = require("lodash");
var BufferedProcess = require('atom').BufferedProcess;
var ChromeDebuggingProtocolLauncher = (function () {
    function ChromeDebuggingProtocolLauncher() {
        this.maxAttempts = 3;
        this.events = new events_1.EventEmitter();
    }
    ChromeDebuggingProtocolLauncher.prototype.unquote = function (value) {
        return lodash_1.trim(value, ['"', " ", "'"]);
    };
    ChromeDebuggingProtocolLauncher.prototype.quote = function (value) {
        var unquoted = this.unquote(value);
        var c, i, l = unquoted.length, o = '"';
        for (i = 0; i < l; i += 1) {
            c = unquoted.charAt(i);
            if (c >= ' ') {
                if (c === '\\' || c === '"') {
                    o += '\\';
                }
                o += c;
            }
            else {
                switch (c) {
                    case '\b':
                        o += '\\b';
                        break;
                    case '\f':
                        o += '\\f';
                        break;
                    case '\n':
                        o += '\\n';
                        break;
                    case '\r':
                        o += '\\r';
                        break;
                    case '\t':
                        o += '\\t';
                        break;
                    default:
                        c = c.charCodeAt();
                        o += '\\u00' + Math.floor(c / 16).toString(16) +
                            (c % 16).toString(16);
                }
            }
        }
        return o + '"';
    };
    // Events
    ChromeDebuggingProtocolLauncher.prototype.didStop = function (cb) {
        this.events.on('didStop', cb);
    };
    ChromeDebuggingProtocolLauncher.prototype.didFail = function (cb) {
        this.events.on('didFail', cb);
    };
    ChromeDebuggingProtocolLauncher.prototype.didReceiveOutput = function (cb) {
        this.events.on('didReceiveOutput', cb);
    };
    ChromeDebuggingProtocolLauncher.prototype.didReceiveError = function (cb) {
        this.events.on('didReceiveError', cb);
    };
    ChromeDebuggingProtocolLauncher.prototype.emitFailure = function (text) {
        this.events.emit('didFail', text);
    };
    // Actions
    ChromeDebuggingProtocolLauncher.prototype.getLauncherArguments = function () {
        return [];
    };
    ChromeDebuggingProtocolLauncher.prototype.getBinaryPath = function () {
        return null;
    };
    ChromeDebuggingProtocolLauncher.prototype.getProcessOptions = function () {
        return {
            shell: true
        };
    };
    ChromeDebuggingProtocolLauncher.prototype.stop = function () {
        // this.process.stdin.end()
        if (os_1.platform() === 'win32') {
            this.process.stdin.end();
            this.process.stderr.removeAllListeners();
            this.process.stderr.pause();
            this.process.stdout.removeAllListeners();
            this.process.stdout.pause();
            this.process.removeAllListeners();
            this.process.kill('SIGINT');
        }
        else {
            this.process.kill();
        }
        this.events.emit('didStop');
        // process.kill(-this.process.pid, 'SIGINT');
    };
    ChromeDebuggingProtocolLauncher.prototype.start = function () {
        var _this = this;
        var launchArgs = this.getLauncherArguments();
        var binaryPath = this.getBinaryPath();
        var options = lodash_1.extend(this.getProcessOptions(), {
            detached: true
        });
        if (binaryPath) {
            var output_1 = '';
            this.process = child_process_1.spawn(binaryPath, launchArgs, options);
            // this.process = new BufferedProcess({
            //   command: binaryPath,
            //   args: launchArgs,
            //   options: options
            // })
            this.process.stdout.on('data', function (res) {
                // console.log('stdout', res.toString())
                _this.events.emit('didReceiveOutput', res);
            });
            this.process.stderr.on('data', function (res) {
                // console.log('stderr', res.toString())
                if (res.toString().length > 0) {
                    output_1 += res.toString();
                    _this.events.emit('didReceiveError', res);
                }
            });
            this.process.on('close', function (code) {
                if (_this.launched !== true) {
                    _this.events.emit('didFail', output_1);
                }
                _this.events.emit('didStop');
            });
            return this.getSocketUrl();
        }
        else {
            throw new Error('No binary path specified');
        }
    };
    ChromeDebuggingProtocolLauncher.prototype.getPages = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            setTimeout(function () {
                var req = http_1.request({
                    hostname: _this.hostName,
                    port: _this.portNumber,
                    path: '/json',
                    method: 'GET'
                }, function (res) {
                    res.setEncoding('utf8');
                    res.on('data', function (chunk) {
                        try {
                            resolve(JSON.parse(String(chunk)));
                        }
                        catch (e) {
                            reject(e);
                        }
                    });
                });
                req.on('error', reject);
                req.end();
            }, 500);
        });
    };
    ChromeDebuggingProtocolLauncher.prototype.findPageUrl = function (page) {
        return Boolean(page.webSocketDebuggerUrl);
    };
    ChromeDebuggingProtocolLauncher.prototype.findSocketUrl = function (pages) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var found = (pages || []).find(function (page) {
                return _this.findPageUrl(page);
            });
            if (found) {
                resolve(found.webSocketDebuggerUrl);
            }
            else {
                reject('Unable to find page with socket');
            }
        });
    };
    ChromeDebuggingProtocolLauncher.prototype.getSocketUrl = function () {
        var _this = this;
        return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            var pages, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < this.maxAttempts)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this
                                .getPages()
                                .catch(function (e) {
                                // continue
                            })];
                    case 2:
                        pages = _a.sent();
                        if (lodash_1.isObject(pages)) {
                            return [3 /*break*/, 4];
                        }
                        _a.label = 3;
                    case 3:
                        i++;
                        return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, this
                            .findSocketUrl(pages)
                            .catch(function (message) {
                            reject(message);
                        })
                            .then(function (socketUrl) {
                            _this.launched = true;
                            resolve(socketUrl);
                        })];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); });
    };
    return ChromeDebuggingProtocolLauncher;
}());
exports.ChromeDebuggingProtocolLauncher = ChromeDebuggingProtocolLauncher;
//# sourceMappingURL=launcher.js.map