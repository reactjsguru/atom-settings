"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
var path_1 = require("path");
var fs_1 = require("fs");
var ChromeDebuggingProtocolPlugin = (function () {
    function ChromeDebuggingProtocolPlugin() {
        this.isConsoleEnabled = true;
    }
    ChromeDebuggingProtocolPlugin.prototype.normalizePath = function (dir, verify) {
        return new Promise(function (resolve, reject) {
            var fixedPath = lodash_1.trim(dir, ['"', " ", "'"]).replace(/^~/, process.env.HOME);
            var normalizedPath = path_1.normalize(fixedPath);
            if (verify) {
                fs_1.realpath(normalizedPath, function (err, resolvedPath) {
                    if (err) {
                        reject(err);
                    }
                    resolve(resolvedPath);
                });
            }
            else {
                resolve(normalizedPath);
            }
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.register = function (pluginClient) {
        this.pluginClient = pluginClient;
    };
    ChromeDebuggingProtocolPlugin.prototype.enableConsole = function () {
        this.isConsoleEnabled = true;
    };
    ChromeDebuggingProtocolPlugin.prototype.disableConsole = function () {
        this.isConsoleEnabled = false;
    };
    ChromeDebuggingProtocolPlugin.prototype.didLaunchError = function (message) { };
    ChromeDebuggingProtocolPlugin.prototype.addEventListeners = function () {
        var _this = this;
        this.launcher.didStop(function () { return _this.pluginClient.stop(); });
        this.launcher.didFail(function (message) {
            _this.pluginClient.status.update(message, 'status-error');
            _this.pluginClient.status.stopLoading();
            _this.didLaunchError(message);
            _this.didStop();
        });
        this.launcher.didReceiveOutput(function (message) {
            _this.pluginClient.console.log(message);
        });
        this.launcher.didReceiveError(function (message) {
            _this.pluginClient.console.log(message);
        });
        this.debugger.didClose(function () { return _this.pluginClient.stop(); });
        this.debugger.didThrownException(function (params) {
            var description = lodash_1.get(params, 'exceptionDetails.exception.description', 'Unknown Error');
            _this.pluginClient.status.update(description, 'status-error');
        });
        this.debugger.didLogMessage(function (params) {
            if (_this.isConsoleEnabled === false)
                return;
            _this.pluginClient.console.output(params.type, params.args);
        });
        this.debugger.didPause(function (params) {
            // set status to pause
            _this.pluginClient.status.update('Debugger Paused', 'status-warning');
            _this.pluginClient.pause();
            // get call stack
            var callstackFrames = _this.debugger.getCallStack();
            if (params.hitBreakpoints && params.hitBreakpoints.length > 0) {
                params.hitBreakpoints.forEach(function (id) { return __awaiter(_this, void 0, void 0, function () {
                    var breakpoint;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.debugger.getBreakpointById(id)];
                            case 1:
                                breakpoint = _a.sent();
                                if (breakpoint) {
                                    atom.focus();
                                    this.pluginClient.status.update('Debugger Breakpoint', 'status-success');
                                    this.pluginClient.activateBreakpoint(breakpoint.url, breakpoint.lineNumber);
                                }
                                else {
                                    this.activateFirstFrame(callstackFrames);
                                }
                                return [2 /*return*/];
                        }
                    });
                }); });
            }
            else {
                _this.activateFirstFrame(callstackFrames);
            }
            _this.pluginClient.setCallStack(callstackFrames);
            _this.pluginClient.setScope(_this.debugger.getScope());
        });
        this.debugger.didResume(function () {
            _this.pluginClient.status.update('Debugger Resumed', 'status-success');
            _this.pluginClient.resume();
        });
        this.debugger.didLoadScript(function (script) {
            _this.addBreakpointsForScript(script);
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.activateFirstFrame = function (callFrames) {
        var firstFrame = lodash_1.first(callFrames);
        if (firstFrame) {
            var filePath = firstFrame.filePath, lineNumber = firstFrame.lineNumber, columnNumber = firstFrame.columnNumber;
            this.pluginClient.activateBreakpoint(filePath, lineNumber, columnNumber);
        }
    };
    ChromeDebuggingProtocolPlugin.prototype.addBreakpointsForScript = function (script) {
        var _this = this;
        var breaks = this.pluginClient.getBreakpoints();
        breaks.forEach(function (b) {
            var filePath = b.filePath, lineNumber = b.lineNumber, condition = b.condition;
            if (filePath === script.url) {
                _this.didAddBreakpoint(filePath, lineNumber, condition);
            }
        });
    };
    // Plugin Actions
    ChromeDebuggingProtocolPlugin.prototype.didStop = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.pluginClient.status.reset();
                        this.pluginClient.console.clear();
                        return [4 /*yield*/, this.debugger.disconnect()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.launcher.stop()];
                    case 2:
                        _a.sent();
                        this.pluginClient.stop();
                        this.pluginClient.status.stopLoading();
                        return [2 /*return*/];
                }
            });
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.didResume = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.debugger.connected) {
                    return [2 /*return*/, this.debugger.resume()];
                }
                return [2 /*return*/];
            });
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.didPause = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.debugger.connected) {
                    return [2 /*return*/, this.debugger.pause()];
                }
                return [2 /*return*/];
            });
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.didAddBreakpoint = function (filePath, lineNumber, condition) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.debugger.connected) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.debugger.addBreakpoint(filePath, lineNumber, condition)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.didChangeBreakpoint = function (filePath, lineNumber, condition) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.didAddBreakpoint(filePath, lineNumber, condition);
                return [2 /*return*/];
            });
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.didRemoveBreakpoint = function (filePath, lineNumber) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.debugger.connected) {
                    return [2 /*return*/, this.debugger.removeBreakpoint(filePath, lineNumber)];
                }
                return [2 /*return*/];
            });
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.didStepOver = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.debugger.connected) {
                    return [2 /*return*/, this.debugger.stepOver()];
                }
                return [2 /*return*/];
            });
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.didStepInto = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.debugger.connected) {
                    this.debugger.stepInto();
                }
                return [2 /*return*/];
            });
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.didStepOut = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.debugger.connected) {
                    this.debugger.stepOut();
                }
                return [2 /*return*/];
            });
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.didRequestProperties = function (request, propertyView) {
        return __awaiter(this, void 0, void 0, function () {
            var properties;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.debugger.connected) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.debugger.getProperties({
                                accessorPropertiesOnly: false,
                                generatePreview: false,
                                objectId: request.objectId,
                                ownProperties: true
                            })];
                    case 1:
                        properties = _a.sent();
                        propertyView.insertFromDescription(properties.result);
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ChromeDebuggingProtocolPlugin.prototype.didEvaluateExpression = function (expression, evaluationView) {
        return __awaiter(this, void 0, void 0, function () {
            var response, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.debugger.connected && this.debugger.paused)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this
                                .debugger
                                .evaluate(expression)
                                .catch(function (e) {
                                // do nothing
                            })];
                    case 1:
                        response = _a.sent();
                        if (response) {
                            result = response.result;
                            if (result) {
                                evaluationView.insertFromResult(result);
                            }
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    return ChromeDebuggingProtocolPlugin;
}());
exports.ChromeDebuggingProtocolPlugin = ChromeDebuggingProtocolPlugin;
//# sourceMappingURL=plugin.js.map